MongoDB_Master_Guide/
├── 1_Fundamentals/
│   ├── Document_Store_and_Collections/
│   │   └── Explanation:
│   │       MongoDB is a **NoSQL document-oriented database** where data is stored in flexible, JSON-like documents.
│   │       - A **Database** contains multiple **Collections**.
│   │       - A **Collection** holds multiple **Documents** (similar to rows in SQL, but schema-less).
│   │       - Documents are BSON (Binary JSON), allowing rich data types.
│   │
│   │       Example_Code:
│   │       ```javascript
│   │       use myDatabase
│   │       db.createCollection("users")
│   │       db.users.insertOne({ name: "Alice", age: 25, interests: ["reading", "travel"] })
│   │       ```
│   │
│   │       Dry Run:
│   │       Input: `{ name: "Alice", age: 25, interests: ["reading", "travel"] }`
│   │       → Stored in `users` collection.
│   │
│   │       Common Pitfalls:
│   │       - Thinking collections require predefined schemas (they don't).
│   │       - Inserting inconsistent document structures without planning.
│   │
│   │       Multiple Approaches:
│   │       - Implicit collection creation by direct insert:
│   │         ```db.newCollection.insertOne({ key: "value" })```
│   │       - Explicit creation using `createCollection()`.
│   │
│   ├── ObjectId_and_Primary_Key/
│   │   └── Explanation:
│   │       Every MongoDB document has a unique `_id` field which acts as its **Primary Key**.
│   │       - By default, `_id` is an **ObjectId** (12-byte value ensuring uniqueness).
│   │       - You can assign custom `_id` values but must ensure uniqueness.
│   │
│   │       Example_Code:
│   │       ```javascript
│   │       db.users.insertOne({ _id: "alice01", name: "Alice" })
│   │       ```
│   │
│   │       Dry Run:
│   │       If `_id` not provided ➜ MongoDB auto-generates ObjectId.
│   │
│   │       Common Pitfalls:
│   │       - Duplicate `_id` insertion causes errors.
│   │       - Misunderstanding ObjectId as a sequential timestamp (it's partially time-based but not ordered like SQL IDs).
│   │
│   │       Multiple Approaches:
│   │       - Use default ObjectId.
│   │       - Use meaningful custom `_id` (e.g., usernames, UUIDs) when beneficial.
│   │
│   │
├── 2_CRUD_Operations/
│   ├── Read/
│   │   ├── Query_Methods/
│   │   │   ├── find_vs_findOne_vs_pretty/
│   │   │   │   └── Explanation:
│   │   │   │       - **find()**: Returns a cursor to all documents matching the query.
│   │   │   │       - **findOne()**: Returns the first matching document (no cursor).
│   │   │   │       - **pretty()**: Formats the output of find() for better readability.
│   │   │   │
│   │   │   │       Example_Code:
│   │   │   │       ```javascript
│   │   │   │       db.users.find({ age: { $gt: 25 } })           // Returns cursor
│   │   │   │       db.users.findOne({ name: "Alice" })           // Returns single doc
│   │   │   │       db.users.find({}).pretty()                    // Nicely formatted output
│   │   │   │       ```
│   │   │   │
│   │   │   │       Dry Run:
│   │   │   │       Collection: users
│   │   │   │       ```
│   │   │   │       { _id: 1, name: "Alice", age: 30 }
│   │   │   │       { _id: 2, name: "Bob", age: 22 }
│   │   │   │       ```
│   │   │   │       Query: `db.users.find({ age: { $gt: 25 } })`
│   │   │   │       Output: Cursor → `{ _id: 1, name: "Alice", age: 30 }`
│   │   │   │
│   │   │   │       Common Pitfalls:
│   │   │   │       - Forgetting that **find()** returns a cursor, not a direct list.
│   │   │   │       - Using **findOne()** when multiple matches are needed.
│   │   │   │
│   │   │   │       Multiple Approaches:
│   │   │   │       - Convert cursor to array in drivers: `cursor.toArray()`.
│   │   │   │       - Use `limit(1)` with `find()` as an alternative to `findOne()`.
│   │   │   │
│   │   │   ├── Comparison_Operators/
│   │   │   │   └── Explanation:
│   │   │   │       MongoDB provides rich comparison operators to filter documents based on field values.
│   │   │   │       - `$gt`  : Greater than
│   │   │   │       - `$gte` : Greater than or equal
│   │   │   │       - `$lt`  : Less than
│   │   │   │       - `$lte` : Less than or equal
│   │   │   │       - `$eq`  : Equal (rarely used, `{ field: value }` is preferred)
│   │   │   │       - `$ne`  : Not equal
│   │   │   │       - `$in`  : Matches any value in an array
│   │   │   │       - `$nin` : Matches none of the values in an array
│   │   │   │
│   │   │   │       Example_Code:
│   │   │   │       ```javascript
│   │   │   │       db.products.find({ price: { $gt: 100, $lt: 500 } })
│   │   │   │       db.users.find({ age: { $in: [25, 30, 35] } })
│   │   │   │       ```
│   │   │   │
│   │   │   │       Dry Run:
│   │   │   │       Collection: products
│   │   │   │       ```
│   │   │   │       { name: "Laptop", price: 450 }
│   │   │   │       { name: "Mouse", price: 25 }
│   │   │   │       ```
│   │   │   │       Query: `db.products.find({ price: { $gt: 100 } })`
│   │   │   │       Output: `{ name: "Laptop", price: 450 }`
│   │   │   │
│   │   │   │       Common Pitfalls:
│   │   │   │       - Using multiple comparison operators incorrectly:
│   │   │   │         ```javascript
│   │   │   │         { price: { $gt: 100 }, price: { $lt: 500 } }  // WRONG
│   │   │   │         ```
│   │   │   │         Correct:
│   │   │   │         ```javascript
│   │   │   │         { price: { $gt: 100, $lt: 500 } }
│   │   │   │         ```
│   │   │   │       - Misusing `$in` with non-array values.
│   │   │   │
│   │   │   │       Multiple Approaches:
│   │   │   │       - Use `$or` for range splits:
│   │   │   │         ```javascript
│   │   │   │         db.items.find({ $or: [ { price: { $lt: 50 } }, { price: { $gt: 500 } } ] })
│   │   │   │         ```
│   │   │   │
│   │   │   ├── Logical_Operators/
│   │   │   │   └── Explanation:
│   │   │   │       Logical operators combine conditions:
│   │   │   │       - `$and` : Both conditions must be true.
│   │   │   │       - `$or`  : At least one condition is true.
│   │   │   │       - `$nor` : None of the conditions are true.
│   │   │   │       - `$not` : Negates a condition (used WITHIN other operators).
│   │   │   │
│   │   │   │       Example_Code:
│   │   │   │       ```javascript
│   │   │   │       db.users.find({ $and: [ { age: { $gt: 25 } }, { status: "active" } ] })
│   │   │   │       db.products.find({ $or: [ { price: { $lt: 50 } }, { category: "electronics" } ] })
│   │   │   │       db.orders.find({ total: { $not: { $gt: 1000 } } })
│   │   │   │       ```
│   │   │   │
│   │   │   │       Dry Run:
│   │   │   │       Users collection:
│   │   │   │       ```
│   │   │   │       { name: "Alice", age: 30, status: "active" }
│   │   │   │       { name: "Bob", age: 20, status: "inactive" }
│   │   │   │       ```
│   │   │   │       Query: `$and` age > 25 & status "active"
│   │   │   │       Output: `{ name: "Alice", age: 30, status: "active" }`
│   │   │   │
│   │   │   │       Common Pitfalls:
│   │   │   │       - Forgetting that top-level implicit `$and` exists:
│   │   │   │         ```javascript
│   │   │   │         db.users.find({ age: { $gt: 25 }, status: "active" })  // Implicit AND
│   │   │   │         ```
│   │   │   │       - Misusing `$not` as a standalone operator (it must wrap another operator).
│   │   │   │
│   │   │   │       Multiple Approaches:
│   │   │   │       - Use implicit `$and` vs explicit `$and`.
│   │   │   │       - `$nor` as an alternative to complex negations.
│   │   │   │
│   │   │   ├── Pattern_Matching/
│   │   │   │   └── Explanation:
│   │   │   │       MongoDB uses **Regular Expressions (`$regex`)** for pattern matching within string fields.
│   │   │   │       - Syntax follows standard regex patterns.
│   │   │   │       - Case-insensitive matching using `$options: 'i'`.
│   │   │   │
│   │   │   │       Example_Code:
│   │   │   │       ```javascript
│   │   │   │       db.users.find({ name: { $regex: "^A" } })            // Names starting with A
│   │   │   │       db.users.find({ name: { $regex: "world$", $options: "i" } })  // Ends with 'world', case-insensitive
│   │   │   │       ```
│   │   │   │
│   │   │   │       Dry Run:
│   │   │   │       Collection:
│   │   │   │       ```
│   │   │   │       { name: "Alice Wonderland" }
│   │   │   │       { name: "Bob World" }
│   │   │   │       { name: "Charlie world" }
│   │   │   │       ```
│   │   │   │       Query: `{ name: { $regex: "world$", $options: "i" } }`
│   │   │   │       Output:
│   │   │   │       ```
│   │   │   │       { name: "Bob World" }
│   │   │   │       { name: "Charlie world" }
│   │   │   │       ```
│   │   │   │
│   │   │   │       Common Pitfalls:
│   │   │   │       - Forgetting performance impact: `$regex` without anchors (`^`, `$`) can trigger full collection scans.
│   │   │   │       - Case sensitivity issues without `$options`.
│   │   │   │
│   │   │   │       Multiple Approaches:
│   │   │   │       - For exact prefixes, consider using **indexed fields** with regex starting with `^`.
│   │   │   │       - Avoid leading wildcards: `{$regex: ".*abc"}` is inefficient.
│   │   │   │
│   │   │   ├── Exists_and_Type_Checking/
│   │   │   │   └── Explanation:
│   │   │   │       - `$exists`: Check if a field is present, regardless of its value.
│   │   │   │       - `$type`: Check the BSON data type of a field.
│   │   │   │
│   │   │   │       Example_Code:
│   │   │   │       ```javascript
│   │   │   │       db.users.find({ phone: { $exists: true } })
│   │   │   │       db.logs.find({ timestamp: { $type: "date" } })
│   │   │   │       ```
│   │   │   │
│   │   │   │       Dry Run:
│   │   │   │       Collection:
│   │   │   │       ```
│   │   │   │       { name: "Alice", phone: "12345" }
│   │   │   │       { name: "Bob" }
│   │   │   │       ```
│   │   │   │       Query: `{ phone: { $exists: true } }`
│   │   │   │       Output: `{ name: "Alice", phone: "12345" }`
│   │   │   │
│   │   │   │       Common Pitfalls:
│   │   │   │       - Confusing `$exists: false` with null values (they're different).
│   │   │   │
│   │   │   │       Multiple Approaches:
│   │   │   │       - Combine `$exists` with `$ne: null` to filter out both missing and null fields.
│   │   │   │
│   │   │   ├── Array_and_Embedded_Doc_Queries/
│   │   │   │   └── Using_$elemMatch/
│   │   │   │       └── Explanation:
│   │   │   │           `$elemMatch` is used to match **specific conditions within array elements**.
│   │   │   │           - Especially useful when multiple conditions must apply to the **same** array element.
│   │   │   │    
│   │   │   │           Example_Code:
│   │   │   │           ```javascript
│   │   │   │           db.orders.find({ items: { $elemMatch: { product: "Book", qty: { $gt: 2 } } } })
│   │   │   │           ```
│   │   │   │    
│   │   │   │           Dry Run:
│   │   │   │           ```
│   │   │   │           { _id: 1, items: [ { product: "Book", qty: 3 }, { product: "Pen", qty: 1 } ] }
│   │   │   │           { _id: 2, items: [ { product: "Book", qty: 1 } ] }
│   │   │   │           ```
│   │   │   │           Query Output: `{ _id: 1, items: [...] }`
│   │   │   │    
│   │   │   │           Common Pitfalls:
│   │   │   │           - Using direct array queries when `$elemMatch` is needed for multi-condition.
│   │   │   │    
│   │   │   │           Multiple Approaches:
│   │   │   │           - Single-condition array queries:
│   │   │   │             ```javascript
│   │   │   │             db.orders.find({ "items.product": "Book" })
│   │   │   │             ```
│   │   │   │
│   │   │   └── Field_Comparison_with_$expr/
│   │   │       └── Explanation:
│   │   │           `$expr` allows **field-to-field comparisons** or applying aggregation expressions in queries.
│   │   │           - Useful for dynamic comparisons within documents.
│   │   │    
│   │   │           Example_Code:
│   │   │           ```javascript
│   │   │           db.employees.find({ $expr: { $gt: [ "$salary", "$bonus" ] } })
│   │   │           ```
│   │   │    
│   │   │           Dry Run:
│   │   │           ```
│   │   │           { name: "Alice", salary: 5000, bonus: 300 }
│   │   │           { name: "Bob", salary: 200, bonus: 300 }
│   │   │           ```
│   │   │           Query Output: `{ name: "Alice", salary: 5000, bonus: 300 }`
│   │   │    
│   │   │           Common Pitfalls:
│   │   │           - Forgetting that `$expr` disables certain index optimizations.
│   │   │    
│   │   │           Multiple Approaches:
│   │   │           - Use `$expr` with `$and`, `$eq`, arithmetic like `$add`.
│   │   │    
│   │   └── Advanced_Querying_Techniques/
│   │       ├── Projection_Rules/
│   │       │   └── Explanation:
│   │       │       - Control which fields to include/exclude in query results.
│   │       │       - Cannot mix inclusion (1) and exclusion (0) except for `_id`.
│   │       │
│   │       │       Example_Code:
│   │       │       ```javascript
│   │       │       db.users.find({}, { name: 1, age: 1, _id: 0 })
│   │       │       ```
│   │       │
│   │       │       Dry Run:
│   │       │       Output only `name` and `age`, exclude `_id`.
│   │       │
│   │       │       Common Pitfalls:
│   │       │       - Trying to include and exclude fields together.
│   │       │
│   │       ├── Sorting_and_Pagination/
│   │       │   └── Explanation:
│   │       │       - `sort()`: Orders results.
│   │       │       - `limit()`: Restricts number of documents.
│   │       │       - `skip()`: Skips N documents (used for pagination).
│   │       │
│   │       │       Example_Code:
│   │       │       ```javascript
│   │       │       db.products.find().sort({ price: -1 }).skip(10).limit(5)
│   │       │       ```
│   │       │
│   │       │       Dry Run:
│   │       │       Skip first 10, return next 5 sorted by price desc.
│   │       │
│   │       │       Common Pitfalls:
│   │       │       - Pagination inefficiency at high skip values.
│   │       │
│   │       ├── Distinct_vs_Find/
│   │       │   └── Explanation:
│   │       │       - `distinct()` returns unique values of a field.
│   │       │       - Unlike `find()`, it doesn’t return full documents.
│   │       │
│   │       │       Example_Code:
│   │       │       ```javascript
│   │       │       db.orders.distinct("customer_id")
│   │       │       ```
│   │       │
│   │       │       Common Pitfalls:
│   │       │       - Expecting document output from `distinct()`.
│   │       │
│   │       ├── Count_Methods/
│   │       │   └── Explanation:
│   │       │       - `countDocuments()`: Accurate, preferred.
│   │       │       - `count()`: Deprecated for some cases.
│   │       │       - `$count`: Used in aggregation.
│   │       │
│   │       │       Example_Code:
│   │       │       ```javascript
│   │       │       db.users.countDocuments({ status: "active" })
│   │       │       db.users.aggregate([ { $match: { status: "active" } }, { $count: "activeCount" } ])
│   │       │       ```
│   │       │
│   │       ├── Null_Handling/
│   │       │   └── Explanation:
│   │       │       - Querying for `null` checks both null values **and** missing fields.
│   │       │
│   │       │       Example_Code:
│   │       │       ```javascript
│   │       │       db.users.find({ phone: null })
│   │       │       db.users.find({ phone: { $exists: true, $eq: null } })  // Only true nulls
│   │       │       ```
│   │       │
│   │       │       Common Pitfalls:
│   │       │       - Not distinguishing between missing fields and null.
│   │       │
│   │       └── Renaming_Fields_in_Projection/
│   │           └── Explanation:
│   │               - Field renaming is **not possible** in standard find() projections.
│   │               - Use `$project` in aggregation for renaming.
│   │        
│   │               Example_Code:
│   │               ```javascript
│   │               db.users.aggregate([
│   │                 { $project: { username: "$name", age: 1, _id: 0 } }
│   │               ])
│   │               ```
│   │        
│   │               Common Pitfalls:
│   │               - Trying to rename fields directly in `find()`.
│   │    
│   ├── Create/
│   │   └── insertOne_vs_insertMany/
│   │       └── Explanation:
│   │           - **insertOne()**: Inserts a single document.
│   │           - **insertMany()**: Inserts multiple documents in one call.
│   │    
│   │           Example_Code:
│   │           ```javascript
│   │           db.users.insertOne({ name: "Alice", age: 30 })
│   │           db.users.insertMany([{ name: "Bob" }, { name: "Charlie" }])
│   │           ```
│   │    
│   │           Common Pitfalls:
│   │           - Ignoring ordered vs unordered inserts in `insertMany({ ordered: false })`.
│   │
│   └── Update_Delete/
│       ├── Update_Methods/
│       │   └── Explanation:
│       │       - `updateOne()`: Updates first matching document.
│       │       - `updateMany()`: Updates all matching documents.
│       │       - `$set`, `$unset`, `$inc` used for modifications.
│       │
│       │       Example_Code:
│       │       ```javascript
│       │       db.users.updateOne({ name: "Alice" }, { $set: { age: 31 } })
│       │       ```
│       │
│       └── Delete_Methods/
│           └── Explanation:
│               - `deleteOne()`: Removes first matching document.
│               - `deleteMany()`: Removes all matching documents.
│        
│               Example_Code:
│               ```javascript
│               db.users.deleteMany({ status: "inactive" })
│               ```
│        
│               Common Pitfalls:
│               - Forgetting to specify filters—risk of mass updates/deletes.
│   
│   
└── Aggregation_Framework/
    └── Pipeline_Stages/
        ├── $match/
        │   └── Explanation:
        │       Acts like a WHERE clause in SQL. Filters documents early in the pipeline.
        │
        │       Example_Code:
        │       ```javascript
        │       db.orders.aggregate([
        │         { $match: { status: "active" } }
        │       ])
        │       ```
        │
        │       Dry Run:
        │       Input:
        │       { _id: 1, status: "active" }
        │       { _id: 2, status: "cancelled" }
        │       → Output: Only `{ _id: 1, status: "active" }`
        │
        │       Common Pitfalls:
        │       - Placing `$match` too late—early filtering improves performance.
        │
        │       Multiple Approaches:
        │       - Combine multiple conditions using `$and`, `$or` within `$match`.
        │
        ├── $group/
        │   └── Explanation:
        │       Groups documents by a key and performs aggregations like `$sum`, `$avg`.
        │
        │       Example_Code:
        │       ```javascript
        │       db.sales.aggregate([
        │         { $group: { _id: "$region", totalSales: { $sum: "$amount" } } }
        │       ])
        │       ```
        │
        │       Dry Run:
        │       Input:
        │       { region: "US", amount: 100 }
        │       { region: "US", amount: 200 }
        │       → Output: { _id: "US", totalSales: 300 }
        │
        │       Common Pitfalls:
        │       - Forgetting `_id` is **mandatory** in `$group`.
        │
        │       Multiple Approaches:
        │       - Use `null` as `_id` for total aggregation without grouping.
        │
        ├── $sort/
        │   └── Explanation:
        │       Sorts documents. Similar to SQL's ORDER BY.
        │
        │       Example_Code:
        │       ```javascript
        │       db.products.aggregate([{ $sort: { price: -1 } }])
        │       ```
        │
        │       Dry Run:
        │       Orders documents by descending price.
        │
        │       Common Pitfalls:
        │       - Sorting large datasets without indexes can cause memory issues.
        │
        ├── $limit/
        │   └── Explanation:
        │       Restricts the number of documents passed down the pipeline.
        │
        │       Example_Code:
        │       ```javascript
        │       db.products.aggregate([{ $limit: 5 }])
        │       ```
        │
        │       Common Pitfalls:
        │       - Use after `$sort` for top-N queries.
        │
        ├── $project/
        │   └── Explanation:
        │       Reshapes documents, includes/excludes fields, renames, computes new fields.
        │
        │       Example_Code:
        │       ```javascript
        │       db.users.aggregate([
        │         { $project: { username: "$name", yearOfBirth: { $subtract: [2025, "$age"] }, _id: 0 } }
        │       ])
        │       ```
        │
        │       Dry Run:
        │       Input: { name: "Alice", age: 30 }
        │       → Output: { username: "Alice", yearOfBirth: 1995 }
        │
        │       Common Pitfalls:
        │       - Misplacing computed fields logic.
        │
        ├── $unwind/
        │   └── Explanation:
        │       Deconstructs arrays—creates a document per array element.
        │
        │       Example_Code:
        │       ```javascript
        │       db.orders.aggregate([{ $unwind: "$items" }])
        │       ```
        │
        │       Dry Run:
        │       Input: { items: ["pen", "book"] }
        │       → Output: { items: "pen" }, { items: "book" }
        │
        │       Common Pitfalls:
        │       - Not handling empty or null arrays.
        │
        └── $lookup/
            └── Explanation:
                Performs left outer join with another collection.
                - Equivalent to SQL JOIN.
                
                Example_Code:
                ```javascript
                db.orders.aggregate([
                  { $lookup: { from: "customers", localField: "cust_id", foreignField: "_id", as: "customer_info" } }
                ])
                ```

                Dry Run:
                Joins orders with matching customers.

                Common Pitfalls:
                - `$lookup` can be heavy—avoid unnecessary joins.
                - Result is an **array** (`customer_info`), often followed by `$unwind`.

                Multiple Approaches:
                - Use pipeline form of `$lookup` for complex joins (MongoDB 3.6+).

    └── Grouping_and_Summing/
        ├── Using_$sum_$avg_$min_$max/
        │   └── Explanation:
        │       These are accumulator operators used within `$group` to perform calculations:
        │       - `$sum`: Adds values.
        │       - `$avg`: Calculates average.
        │       - `$min` / `$max`: Finds minimum or maximum value.
        │
        │       Example_Code:
        │       ```javascript
        │       db.sales.aggregate([
        │         { $group: {
        │             _id: "$region",
        │             totalSales: { $sum: "$amount" },
        │             avgSales: { $avg: "$amount" },
        │             maxSale: { $max: "$amount" }
        │         }}
        │       ])
        │       ```
        │
        │       Dry Run:
        │       Input:
        │       { region: "US", amount: 100 }
        │       { region: "US", amount: 200 }
        │       Output:
        │       { _id: "US", totalSales: 300, avgSales: 150, maxSale: 200 }
        │
        │       Common Pitfalls:
        │       - Using field names without `$` inside accumulators.
        │       - Forgetting that `$sum: 1` counts documents.
        │
        │       Multiple Approaches:
        │       - Count docs per group:
        │         ```javascript
        │         { $sum: 1 }
        │         ```
        │
        ├── Using_$count_vs_$sum_1/
        │   └── Explanation:
        │       - `$count` is a shortcut stage for counting documents post-filter.
        │       - `$sum: 1` inside `$group` is used for grouped counts.
        │
        │       Example_Code:
        │       ```javascript
        │       db.orders.aggregate([
        │         { $match: { status: "completed" } },
        │         { $count: "completedOrders" }
        │       ])
        │       ```
        │
        │       vs
        │
        │       ```javascript
        │       db.orders.aggregate([
        │         { $group: { _id: "$status", count: { $sum: 1 } } }
        │       ])
        │       ```
        │
        │       Common Pitfalls:
        │       - Using `$count` when grouping is required (it doesn't group).
        │
        └── Complex_Aggregations_SQL_HAVING/
            └── Explanation:
                To mimic SQL's `GROUP BY ... HAVING`, combine `$group` with `$match` (post-group filter).
                - `$match` after `$group` acts like `HAVING`.
                
                Example_Code:
                ```javascript
                db.sales.aggregate([
                  { $group: { _id: "$region", total: { $sum: "$amount" } } },
                  { $match: { total: { $gt: 1000 } } }   // Acts like HAVING total > 1000
                ])
                ```

                Dry Run:
                Groups sales by region, filters regions where total > 1000.

                Common Pitfalls:
                - Trying to apply `$match` **before** `$group` for aggregated fields.
                - Remember: Pre-aggregation filters go in `$match` (early), post-aggregation filters go after `$group`.

                Multiple Approaches:
                - Use `$facet` for multi-path aggregations if needed.
    └── Lookup_and_Unwind/
        ├── Join_with_$lookup/
        │   └── Explanation:
        │       `$lookup` performs a **left outer join** between collections.
        │       - Basic form joins on fields.
        │       - Advanced form (pipeline) allows filtering and projecting joined data.
        │
        │       Example_Code:
        │       ```javascript
        │       db.orders.aggregate([
        │         { $lookup: {
        │             from: "customers",
        │             localField: "cust_id",
        │             foreignField: "_id",
        │             as: "customer_info"
        │         }}
        │       ])
        │       ```
        │
        │       Dry Run:
        │       orders: { _id: 1, cust_id: 101 }
        │       customers: { _id: 101, name: "Alice" }
        │       → Output:
        │       { _id: 1, cust_id: 101, customer_info: [ { _id: 101, name: "Alice" } ] }
        │
        │       Common Pitfalls:
        │       - Forgetting that `$lookup` always returns an **array**.
        │       - Joining large datasets without filtering—can cause performance hits.
        │
        │       Multiple Approaches:
        │       - Use **pipeline syntax** for more control (MongoDB 3.6+):
        │       ```javascript
        │       {
        │         $lookup: {
        │           from: "customers",
        │           let: { cid: "$cust_id" },
        │           pipeline: [
        │             { $match: { $expr: { $eq: [ "$_id", "$$cid" ] } } },
        │             { $project: { name: 1, _id: 0 } }
        │           ],
        │           as: "customer_info"
        │         }
        │       }
        │       ```
        │
        ├── Flattening_with_$unwind/
        │   └── Explanation:
        │       `$unwind` deconstructs array fields into multiple documents.
        │       - Often paired with `$lookup` to flatten joined arrays.
        │
        │       Example_Code:
        │       ```javascript
        │       db.orders.aggregate([
        │         { $lookup: { ... } },
        │         { $unwind: "$customer_info" }
        │       ])
        │       ```
        │
        │       Dry Run:
        │       Before:
        │       { customer_info: [ { name: "Alice" } ] }
        │       After:
        │       { customer_info: { name: "Alice" } }
        │
        │       Common Pitfalls:
        │       - Not handling cases where the array is empty or missing.
        │       - Use `preserveNullAndEmptyArrays: true` if needed.
        │
        │       Multiple Approaches:
        │       - Skip `$unwind` if array structure is acceptable.
        │
        └── Multi_Stage_Pipeline_Example/
            └── Explanation:
                Combine `$match`, `$lookup`, `$unwind`, `$group`, `$project` for complex queries.

                Use Case:
                - Find total orders per customer, but only for "active" customers.

                Example_Code:
                ```javascript
                db.orders.aggregate([
                  { $match: { status: "completed" } },
                  { $lookup: {
                      from: "customers",
                      localField: "cust_id",
                      foreignField: "_id",
                      as: "customer_info"
                  }},
                  { $unwind: "$customer_info" },
                  { $match: { "customer_info.status": "active" } },
                  { $group: {
                      _id: "$cust_id",
                      totalOrders: { $sum: 1 }
                  }},
                  { $project: { _id: 0, customerId: "$_id", totalOrders: 1 } }
                ])
                ```

                Dry Run:
                Filters completed orders, joins active customers, counts orders per customer.

                Common Pitfalls:
                - Misordering stages (e.g., filtering after `$group` when it should be before).
                - Forgetting `$unwind` after `$lookup` when expecting flat data.

                Multiple Approaches:
                - Use `$facet` for parallel pipelines if multiple outputs needed.

└── Complex_Examples/
    ├── Top_N_Customers_by_Total_Spent/
    │   └── Problem:
    │       Find the **top 3 customers** who have spent the most, considering only 'completed' orders.
    │
    │       Approach:
    │       - Filter orders by status.
    │       - Group by customer, summing total spent.
    │       - Sort by total spent descending.
    │       - Limit to top 3.
    │
    │       Solution:
    │       ```javascript
    │       db.orders.aggregate([
    │         { $match: { status: "completed" } },
    │         { $group: { _id: "$cust_id", totalSpent: { $sum: "$amount" } } },
    │         { $sort: { totalSpent: -1 } },
    │         { $limit: 3 },
    │         { $lookup: {
    │             from: "customers",
    │             localField: "_id",
    │             foreignField: "_id",
    │             as: "customer_info"
    │         }},
    │         { $unwind: "$customer_info" },
    │         { $project: { _id: 0, customer: "$customer_info.name", totalSpent: 1 } }
    │       ])
    │       ```
    │
    │       Dry Run:
    │       Orders Input:
    │       { cust_id: 1, status: "completed", amount: 200 }
    │       { cust_id: 1, status: "completed", amount: 300 }
    │       { cust_id: 2, status: "completed", amount: 800 }
    │       { cust_id: 3, status: "pending", amount: 500 }
    │
    │       ➔ After $group + $sort + $limit:
    │       [{ cust_id: 2, totalSpent: 800 }, { cust_id: 1, totalSpent: 500 }]
    │
    │       Common Pitfalls:
    │       - Forgetting to filter by status **before** grouping.
    │       - Not unwinding `$lookup` result.
    │
    │       Alternative:
    │       - Use `$facet` if needing both top N and total stats in one pipeline.
    │
    ├── Orders_with_High_Value_Items_and_Customer_Info/
    │   └── Problem:
    │       List all orders containing any item priced above $500, along with customer name.
    │
    │       Approach:
    │       - Use `$unwind` to access individual items.
    │       - Filter items by price.
    │       - Join with customers.
    │
    │       Solution:
    │       ```javascript
    │       db.orders.aggregate([
    │         { $unwind: "$items" },
    │         { $match: { "items.price": { $gt: 500 } } },
    │         { $lookup: {
    │             from: "customers",
    │             localField: "cust_id",
    │             foreignField: "_id",
    │             as: "customer_info"
    │         }},
    │         { $unwind: "$customer_info" },
    │         { $project: { order_id: "$_id", item: "$items.name", price: "$items.price", customer: "$customer_info.name", _id: 0 } }
    │       ])
    │       ```
    │
    │       Dry Run:
    │       Input Order:
    │       { _id: 10, cust_id: 1, items: [ { name: "Laptop", price: 1200 }, { name: "Mouse", price: 30 } ] }
    │
    │       ➔ After $unwind + $match:
    │       { _id: 10, items: { name: "Laptop", price: 1200 } }
    │
    │       Common Pitfalls:
    │       - Missing `$unwind` before filtering array contents.
    │       - Forgetting that this returns one doc per matching item.
    │
    └── Monthly_Sales_Report_Per_Region/
        └── Problem:
            Generate a monthly sales report showing total sales per region for the last 3 months.
        
            Approach:
            - Filter sales within the last 3 months using date logic.
            - Group by region and month.
            - Sort by month descending.

            Solution:
            ```javascript
            db.sales.aggregate([
              { $match: { date: { $gte: ISODate("2024-12-01") } } },
              { $group: {
                  _id: { region: "$region", month: { $month: "$date" } },
                  totalSales: { $sum: "$amount" }
              }},
              { $sort: { "_id.month": -1 } }
            ])
            ```

            Dry Run:
            Input:
            { region: "US", date: ISODate("2025-02-15"), amount: 1000 }
            ➔ Output:
            { _id: { region: "US", month: 2 }, totalSales: 1000 }

            Common Pitfalls:
            - Using `$month` without considering year overlap.
            - Forgetting to sort properly for reporting.
